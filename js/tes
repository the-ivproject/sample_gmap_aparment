var map;
var locations = [];

function initialiseMap() {
    const SPREADSHEET_ID = '1Ewe5k4VchJFi1kWqNk--4yOvPbjJmzysE5gPnOFGWO8'
    const SPREADSHEET_KEY = 'AIzaSyBxy4juu30u8ac7Cd5bsx2dhQeapOVs_i4'
  // Load data from an example Google spreadsheet that contains latitude and longitude columns using Google Sheets API v4 that returns JSON.
  // Replace the ID of your Google spreadsheet and you API key in the URL:
  // https://sheets.googleapis.com/v4/spreadsheets/ID_OF_YOUR_GOOGLE_SPREADSHEET/values/Sheet1!A2:Q?key=YOUR_API_KEY
  // Also make sure your API key is authorised to access Google Sheets API - you can enable that through your Google Developer console.
  // Finally, in the URL, fix the sheet name and the range that you are accessing from your spreadsheet. 'Sheet1' is the default name for the first sheet.
  $.getJSON(`https://sheets.googleapis.com/v4/spreadsheets/${SPREADSHEET_ID}/values/latlng!A1:Z1000?key=${SPREADSHEET_KEY}`, function(data) {
    	// data.values contains the array of rows from the spreadsheet. Each row is also an array of cell values.
    	// Modify the code below to suit the structure of your spreadsheet.
    	// console.log(data.values)
        let res = data.values
        let loc = []
        for (let i = 1; i < res.length; i++) {
            let object = {}
            for (let j = 0; j < res[i].length; j++) {
                let a = res[0][j]
                object[a] = res[i][j]
    
            }
            loc.push(object)
        }
        // $(data.values).each(function() {
           
    	// 	var location = {};
		// 		location.title = this[2];
		// 		location.latitude = parseFloat(this[15]);
      	//         location.longitude = parseFloat(this[16]);
        //         location.institution = this[3];
       	//         location.department = this[4];
        //         location.funder = this[0];
        //         location.url = this[13];
	  	// 	    locations.push(location);
    	// });

      // Center on (0, 0). Map center and zoom will reconfigure later (fitbounds method)
  
    //   var mapOptions = {
    //     zoom: 10,
    //     center: new google.maps.LatLng(-2.0983346450370477, 110.36945939943752)
    //   };

    //   var map = new google.maps.Map(document.getElementById('map'), mapOptions);
    //   setLocations(map, locations);
  });
}


for(let i = 0; i < locations.length; i++) {
    console.log(locations[i])
}